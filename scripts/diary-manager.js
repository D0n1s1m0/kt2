// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞
class DiaryManager {
    constructor() {
        this.entries = [];
        this.filters = new Set(['all']);
        this.currentPage = 1;
        this.entriesPerPage = 5;
        
        this.init();
    }

    init() {
        this.loadEntries();
        this.setupEventListeners();
        this.setupFilters();
        this.updateStats();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    async loadEntries() {
        const cached = localStorage.getItem('diaryEntries');
        
        if (cached) {
            this.entries = JSON.parse(cached);
            this.renderEntries();
        } else {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            this.entries = this.getInitialEntries();
            this.saveToStorage();
            this.renderEntries();
        }
    }

    getInitialEntries() {
        return [
            {
                id: 1,
                date: '2024-01-15',
                title: '–ó–∞–≤–µ—Ä—à–∏–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞',
                description: '–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∫—Ä—É–ø–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º - –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–º —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–ø–ª–∞—Ç—ã –∏ –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–ª Stripe –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π.',
                status: 'completed',
                tags: ['React', 'Node.js', 'MongoDB']
            },
            {
                id: 2,
                date: '2024-01-10',
                title: '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º',
                description: '–ù–∞—á–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–æ–º –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö.',
                status: 'in-progress',
                tags: ['React Native', 'Firebase']
            },
            {
                id: 3,
                date: '2024-01-05',
                title: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
                description: '–ù–∞—á–∞–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ò–∑—É—á–∞—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.',
                status: 'planned',
                tags: ['Analytics', 'Planning']
            }
        ];
    }

    setupEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
        const toggleBtn = document.getElementById('toggleFormBtn');
        const cancelBtn = document.getElementById('cancelFormBtn');
        const form = document.getElementById('addEntryForm');

        if (toggleBtn && form) {
            toggleBtn.addEventListener('click', () => this.toggleForm(form));
        }

        if (cancelBtn && form) {
            cancelBtn.addEventListener('click', () => this.hideForm(form));
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        const diaryForm = document.getElementById('diaryForm');
        if (diaryForm) {
            diaryForm.addEventListener('submit', (e) => this.handleFormSubmit(e));
        }

        // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        const exportJSON = document.getElementById('exportJSON');
        const exportPDF = document.getElementById('exportPDF');
        const printDiary = document.getElementById('printDiary');

        if (exportJSON) exportJSON.addEventListener('click', () => this.exportJSON());
        if (exportPDF) exportPDF.addEventListener('click', () => this.exportPDF());
        if (printDiary) printDiary.addEventListener('click', () => this.printDiary());
    }

    setupFilters() {
        const filterButtons = document.querySelectorAll('.diary-quick-nav .filter-btn');
        
        filterButtons.forEach(button => {
            button.addEventListener('click', () => {
                const filter = button.dataset.filter;
                this.applyFilter(filter, button);
            });
        });
    }

    applyFilter(filter, clickedButton) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        document.querySelectorAll('.diary-quick-nav .filter-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        clickedButton.classList.add('active');

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
        this.filters.clear();
        if (filter === 'all') {
            this.filters.add('all');
        } else {
            this.filters.add(filter);
        }

        this.renderEntries();
    }

    renderEntries() {
        const container = document.getElementById('entriesList');
        if (!container) return;

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π
        const filteredEntries = this.entries.filter(entry => {
            return this.filters.has('all') || this.filters.has(entry.status);
        });

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        const startIndex = (this.currentPage - 1) * this.entriesPerPage;
        const paginatedEntries = filteredEntries.slice(startIndex, startIndex + this.entriesPerPage);

        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
        container.innerHTML = paginatedEntries.map(entry => this.renderEntry(entry)).join('');

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        this.updatePagination(filteredEntries.length);
    }

    renderEntry(entry) {
        const date = new Date(entry.date).toLocaleDateString('ru-RU');
        
        return `
            <div class="entry-item ${entry.status}" data-entry-id="${entry.id}">
                <div class="entry-date">${date}</div>
                <h3 class="entry-title">${entry.title}</h3>
                <p class="entry-description">${entry.description}</p>
                <div class="entry-tags">
                    ${entry.tags.map(tag => `<span class="entry-tag">${tag}</span>`).join('')}
                </div>
                <span class="entry-status">${this.getStatusText(entry.status)}</span>
                <div class="entry-actions">
                    <button class="action-btn edit" onclick="diaryManager.editEntry(${entry.id})">‚úèÔ∏è</button>
                    <button class="action-btn delete" onclick="diaryManager.deleteEntry(${entry.id})">üóëÔ∏è</button>
                </div>
            </div>
        `;
    }

    getStatusText(status) {
        const statusMap = {
            'planned': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
            'in-progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
        };
        return statusMap[status] || status;
    }

    toggleForm(form) {
        form.classList.toggle('hidden');
    }

    hideForm(form) {
        form.classList.add('hidden');
        form.reset();
    }

    async handleFormSubmit(e) {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const entry = {
            id: Date.now(), // –ü—Ä–æ—Å—Ç–æ–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
            date: formData.get('entryDate'),
            title: formData.get('entryTitle'),
            description: formData.get('entryDescription'),
            status: formData.get('entryStatus'),
            tags: this.extractTags(formData.get('entryDescription'))
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!this.validateEntry(entry)) {
            return;
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        this.entries.unshift(entry);
        this.saveToStorage();
        this.renderEntries();
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        e.target.reset();
        this.hideForm(document.getElementById('addEntryForm'));
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.updateStats();
    }

    validateEntry(entry) {
        if (!entry.date || !entry.title || !entry.description || !entry.status) {
            this.showMessage('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 'error');
            return false;
        }

        if (entry.title.length < 5) {
            this.showMessage('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
            return false;
        }

        if (entry.description.length < 10) {
            this.showMessage('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
            return false;
        }

        return true;
    }

    extractTags(description) {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        const words = description.split(' ');
        const techKeywords = ['React', 'JavaScript', 'Node', 'Vue', 'Angular', 'TypeScript', 'Python', 'Java'];
        
        return words.filter(word => 
            techKeywords.some(keyword => 
                word.toLowerCase().includes(keyword.toLowerCase())
            )
        ).slice(0, 3);
    }

    editEntry(entryId) {
        const entry = this.entries.find(e => e.id === entryId);
        if (!entry) return;

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å–∏
        document.getElementById('entryDate').value = entry.date;
        document.getElementById('entryTitle').value = entry.title;
        document.getElementById('entryDescription').value = entry.description;
        document.getElementById('entryStatus').value = entry.status;

        // –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã
        const form = document.getElementById('addEntryForm');
        form.classList.remove('hidden');

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏
        this.deleteEntry(entryId, false);
    }

    deleteEntry(entryId, confirm = true) {
        if (confirm && !window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) {
            return;
        }

        this.entries = this.entries.filter(entry => entry.id !== entryId);
        this.saveToStorage();
        this.renderEntries();
        this.updateStats();
    }

    updateStats() {
        const completed = this.entries.filter(entry => entry.status === 'completed').length;
        const inProgress = this.entries.filter(entry => entry.status === 'in-progress').length;
        const planned = this.entries.filter(entry => entry.status === 'planned').length;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const completedCount = document.getElementById('completedCount');
        if (completedCount) completedCount.textContent = completed;

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
    }

    updatePagination(totalEntries) {
        const totalPages = Math.ceil(totalEntries / this.entriesPerPage);
        const pagination = document.getElementById('pagination');
        
        if (pagination) {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        }
    }

    exportJSON() {
        const data = JSON.stringify(this.entries, null, 2);
        this.downloadFile(data, 'diary-entries.json', 'application/json');
    }

    exportPDF() {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
        this.showMessage('–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –±—É–¥—É—â–µ–º', 'info');
    }

    printDiary() {
        window.print();
    }

    downloadFile(content, filename, contentType) {
        const blob = new Blob([content], { type: contentType });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    }

    showMessage(message, type = 'info') {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        alert(`${type.toUpperCase()}: ${message}`);
    }

    saveToStorage() {
        localStorage.setItem('diaryEntries', JSON.stringify(this.entries));
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.diaryManager = new DiaryManager();
});
