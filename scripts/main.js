// main.js - –ü–æ–ª–Ω—ã–π —Ñ–∞–π–ª JavaScript –¥–ª—è —Å–∞–π—Ç–∞-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≤–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
class PageTransition {
    constructor() {
        this.transitionElement = null;
        this.init();
    }

    init() {
        this.createTransitionElement();
        this.handleLinkClicks();
        this.handleBrowserNavigation();
        this.addPageLoadClass();
    }

    createTransitionElement() {
        this.transitionElement = document.createElement('div');
        this.transitionElement.className = 'page-transition';
        document.body.appendChild(this.transitionElement);
    }

    handleLinkClicks() {
        document.addEventListener('click', (e) => {
            const link = e.target.closest('a');
            
            if (link && link.href && this.isInternalLink(link)) {
                e.preventDefault();
                this.navigateTo(link.href);
            }
        });
    }

    handleBrowserNavigation() {
        window.addEventListener('popstate', () => {
            this.showPageTransition();
        });
    }

    isInternalLink(link) {
        return link.hostname === window.location.hostname && 
               !link.hash && 
               link.target !== '_blank' &&
               !link.download &&
               !link.href.includes('mailto:') &&
               !link.href.includes('tel:');
    }

    navigateTo(url) {
        this.showPageTransition();
        
        setTimeout(() => {
            window.location.href = url;
        }, 400);
    }

    showPageTransition() {
        if (this.transitionElement) {
            this.transitionElement.classList.add('active');
            
            setTimeout(() => {
                this.transitionElement.classList.remove('active');
            }, 800);
        }
    }

    addPageLoadClass() {
        document.body.classList.add('page-load');
        
        setTimeout(() => {
            document.body.classList.remove('page-load');
        }, 600);
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏
class ThemeManager {
    constructor() {
        this.currentTheme = this.getSavedTheme();
        this.themePanel = null;
        this.init();
    }

    init() {
        this.applyTheme(this.currentTheme);
        this.createThemeSwitcher();
        this.addSystemThemeListener();
    }

    getSavedTheme() {
        const saved = localStorage.getItem('theme');
        return saved || 'orange';
    }

    applyTheme(themeName) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è —Ç–µ–º—ã
        document.documentElement.style.transition = 'all 0.5s cubic-bezier(0.4, 0, 0.2, 1)';
        
        setTimeout(() => {
            document.documentElement.setAttribute('data-theme', themeName);
            this.currentTheme = themeName;
            localStorage.setItem('theme', themeName);
            
            setTimeout(() => {
                document.documentElement.style.transition = '';
            }, 500);
            
            this.updateActiveThemeButton();
            this.updateSakuraLeaves();
        }, 10);
    }

    createThemeSwitcher() {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        const themeSwitcher = document.createElement('div');
        themeSwitcher.className = 'theme-switcher';
        themeSwitcher.setAttribute('aria-label', '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É');
        themeSwitcher.innerHTML = '<div class="theme-switcher-icon">üé®</div>';
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
        this.themePanel = document.createElement('div');
        this.themePanel.className = 'theme-panel';
        this.themePanel.setAttribute('aria-label', '–í—ã–±–æ—Ä —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è');
        
        const themes = [
            { name: 'orange', icon: 'üçä', label: '–û—Ä–∞–Ω–∂–µ–≤–∞—è —Ç–µ–º–∞' },
            { name: 'beige', icon: 'üü´', label: '–ë–µ–∂–µ–≤–∞—è —Ç–µ–º–∞' },
            { name: 'dark', icon: 'üåô', label: '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞' },
            { name: 'green', icon: 'üåø', label: '–ó–µ–ª–µ–Ω–∞—è —Ç–µ–º–∞' },
            { name: 'blue', icon: 'üíô', label: '–°–∏–Ω—è—è —Ç–µ–º–∞' },
            { name: 'pink', icon: 'üå∏', label: '–†–æ–∑–æ–≤–∞—è —Ç–µ–º–∞' },
            { name: 'purple', icon: '‚òÇÔ∏è', label: '–§–∏–æ–ª–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞' }
        ];
        
        themes.forEach(theme => {
            const themeOption = document.createElement('button');
            themeOption.className = `theme-option theme-${theme.name}`;
            themeOption.setAttribute('data-theme', theme.name);
            themeOption.setAttribute('aria-label', theme.label);
            themeOption.setAttribute('title', theme.label);
            themeOption.innerHTML = theme.icon;
            themeOption.setAttribute('type', 'button');
            
            themeOption.addEventListener('click', () => {
                this.applyTheme(theme.name);
                this.hideThemePanel();
            });
            
            this.themePanel.appendChild(themeOption);
        });
        
        document.body.appendChild(themeSwitcher);
        document.body.appendChild(this.themePanel);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        themeSwitcher.addEventListener('click', (e) => {
            e.stopPropagation();
            this.toggleThemePanel();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–µ
        document.addEventListener('click', (e) => {
            if (!this.themePanel.contains(e.target) && !themeSwitcher.contains(e.target)) {
                this.hideThemePanel();
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.hideThemePanel();
            }
        });
    }

    toggleThemePanel() {
        this.themePanel.classList.toggle('active');
        
        if (this.themePanel.classList.contains('active')) {
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É —Ç–µ–º—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
            const firstThemeButton = this.themePanel.querySelector('.theme-option');
            if (firstThemeButton) {
                firstThemeButton.focus();
            }
        }
    }

    hideThemePanel() {
        this.themePanel.classList.remove('active');
    }

    updateActiveThemeButton() {
        const themeButtons = this.themePanel.querySelectorAll('.theme-option');
        themeButtons.forEach(button => {
            button.classList.remove('active');
            if (button.getAttribute('data-theme') === this.currentTheme) {
                button.classList.add('active');
                button.setAttribute('aria-current', 'true');
            } else {
                button.removeAttribute('aria-current');
            }
        });
    }

    updateSakuraLeaves() {
        const leaves = document.querySelectorAll('.sakura-leaf');
        leaves.forEach(leaf => {
            leaf.style.transition = 'background-color 0.5s ease';
        });
    }

    addSystemThemeListener() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
        
        const handleSystemThemeChange = (e) => {
            if (!localStorage.getItem('theme')) {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–µ–º—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª —Ç–µ–º—É –≤—Ä—É—á–Ω—É—é
                this.applyTheme(e.matches ? 'dark' : 'orange');
            }
        };
        
        mediaQuery.addEventListener('change', handleSystemThemeChange);
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
class ProjectsFilter {
    constructor() {
        this.filterButtons = null;
        this.projectCards = null;
        this.activeFilter = 'all';
        this.init();
    }

    init() {
        this.filterButtons = document.querySelectorAll('.filter-btn');
        this.projectCards = document.querySelectorAll('.project-card');
        
        if (this.filterButtons.length > 0) {
            this.setupEventListeners();
            this.setInitialFilter();
        }
    }

    setupEventListeners() {
        this.filterButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const filter = e.target.getAttribute('data-filter');
                this.setActiveFilter(filter);
                this.filterProjects(filter);
            });
        });
    }

    setInitialFilter() {
        const activeButton = document.querySelector('.filter-btn.active');
        if (activeButton) {
            this.activeFilter = activeButton.getAttribute('data-filter') || 'all';
        }
    }

    setActiveFilter(filter) {
        this.filterButtons.forEach(button => {
            button.classList.remove('active');
            if (button.getAttribute('data-filter') === filter) {
                button.classList.add('active');
            }
        });
        this.activeFilter = filter;
    }

    filterProjects(filter) {
        this.projectCards.forEach(card => {
            const category = card.getAttribute('data-category');
            
            if (filter === 'all' || category === filter) {
                this.showProject(card);
            } else {
                this.hideProject(card);
            }
        });
    }

    showProject(card) {
        card.style.display = 'block';
        setTimeout(() => {
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, 50);
    }

    hideProject(card) {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        setTimeout(() => {
            card.style.display = 'none';
        }, 300);
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–µ–π –ª–∏—Å—Ç—å–µ–≤ —Å–∞–∫—É—Ä—ã
class SakuraAnimation {
    constructor() {
        this.container = null;
        this.leafCount = 25;
        this.init();
    }

    init() {
        this.createContainer();
        this.generateLeaves();
        this.startAnimation();
    }

    createContainer() {
        this.container = document.querySelector('.sakura-container');
        if (!this.container) {
            this.container = document.createElement('div');
            this.container.className = 'sakura-container';
            document.body.appendChild(this.container);
        }
    }

    generateLeaves() {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏—Å—Ç—å—è
        this.container.innerHTML = '';
        
        for (let i = 0; i < this.leafCount; i++) {
            const leaf = this.createLeaf(i);
            this.container.appendChild(leaf);
        }
    }

    createLeaf(index) {
        const leaf = document.createElement('div');
        const leafType = (index % 5) + 1;
        
        leaf.className = `sakura-leaf type-${leafType}`;
        leaf.style.left = `${Math.random() * 100}%`;
        leaf.style.animationDelay = `${Math.random() * 20}s`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        leaf.style.animationDelay = `${Math.random() * 15}s`;
        
        return leaf;
    }

    startAnimation() {
        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ CSS
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }

    updateLeavesForTheme() {
        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç—å–µ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã
        this.generateLeaves();
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
class ProgressBarAnimation {
    constructor() {
        this.progressBars = null;
        this.init();
    }

    init() {
        this.progressBars = document.querySelectorAll('.skill-level, .progress-fill');
        this.animateOnScroll();
    }

    animateOnScroll() {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    this.animateProgressBar(entry.target);
                    observer.unobserve(entry.target);
                }
            });
        }, {
            threshold: 0.5,
            rootMargin: '0px 0px -50px 0px'
        });

        this.progressBars.forEach(bar => {
            observer.observe(bar);
        });
    }

    animateProgressBar(bar) {
        const width = bar.style.width;
        bar.style.width = '0';
        
        setTimeout(() => {
            bar.style.width = width;
            bar.style.transition = 'width 1.5s cubic-bezier(0.4, 0, 0.2, 1)';
        }, 300);
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
class ContactForm {
    constructor() {
        this.form = null;
        this.init();
    }

    init() {
        this.form = document.getElementById('contactForm');
        if (this.form) {
            this.setupValidation();
            this.setupSubmission();
        }
    }

    setupValidation() {
        const inputs = this.form.querySelectorAll('input, textarea');
        
        inputs.forEach(input => {
            input.addEventListener('blur', () => {
                this.validateField(input);
            });
            
            input.addEventListener('input', () => {
                this.clearError(input);
            });
        });
    }

    validateField(field) {
        const value = field.value.trim();
        const errorElement = document.getElementById(field.id + 'Error');
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
        this.clearError(field);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (field.hasAttribute('required') && !value) {
            this.showError(field, '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
            return false;
        }
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        switch (field.type) {
            case 'email':
                if (!this.isValidEmail(value)) {
                    this.showError(field, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
                    return false;
                }
                break;
                
            case 'text':
                if (field.id === 'name' && value.length < 2) {
                    this.showError(field, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
                    return false;
                }
                break;
                
            case 'textarea':
                if (field.id === 'message' && value.length < 10) {
                    this.showError(field, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
                    return false;
                }
                break;
        }
        
        return true;
    }

    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    showError(field, message) {
        field.classList.add('error');
        const errorElement = document.getElementById(field.id + 'Error');
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }
    }

    clearError(field) {
        field.classList.remove('error');
        const errorElement = document.getElementById(field.id + 'Error');
        if (errorElement) {
            errorElement.textContent = '';
            errorElement.style.display = 'none';
        }
    }

    setupSubmission() {
        this.form.addEventListener('submit', (e) => {
            e.preventDefault();
            
            if (this.validateForm()) {
                this.submitForm();
            }
        });
    }

    validateForm() {
        let isValid = true;
        const inputs = this.form.querySelectorAll('input[required], textarea[required]');
        
        inputs.forEach(input => {
            if (!this.validateField(input)) {
                isValid = false;
            }
        });
        
        return isValid;
    }

    async submitForm() {
        const formData = new FormData(this.form);
        const submitButton = this.form.querySelector('button[type="submit"]');
        const originalText = submitButton.textContent;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
        submitButton.disabled = true;
        
        try {
            // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π endpoint)
            await this.simulateApiCall(formData);
            
            this.showSuccessMessage();
            this.form.reset();
            
        } catch (error) {
            this.showErrorMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            submitButton.textContent = originalText;
            submitButton.disabled = false;
        }
    }

    async simulateApiCall(formData) {
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                // 90% —à–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                if (Math.random() > 0.1) {
                    resolve({ success: true });
                } else {
                    reject(new Error('Network error'));
                }
            }, 1500);
        });
    }

    showSuccessMessage() {
        this.showMessage('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
    }

    showErrorMessage(message) {
        this.showMessage(message, 'error');
    }

    showMessage(text, type) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageElement = document.createElement('div');
        messageElement.className = `form-message form-message-${type}`;
        messageElement.textContent = text;
        messageElement.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: 300px;
        `;
        
        if (type === 'success') {
            messageElement.style.background = 'var(--accent-color)';
        } else {
            messageElement.style.background = '#e74c3c';
        }
        
        document.body.appendChild(messageElement);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            messageElement.style.transform = 'translateX(0)';
        }, 100);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            messageElement.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (messageElement.parentNode) {
                    messageElement.parentNode.removeChild(messageElement);
                }
            }, 300);
        }, 5000);
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–æ–º –æ–±—É—á–µ–Ω–∏—è
class StudyDiary {
    constructor() {
        this.form = null;
        this.entriesList = null;
        this.init();
    }

    init() {
        this.form = document.getElementById('diaryForm');
        this.entriesList = document.querySelector('.entries-list');
        
        if (this.form) {
            this.setupForm();
            this.loadEntries();
        }
    }

    setupForm() {
        this.form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.addEntry();
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const dateInput = document.getElementById('entryDate');
        if (dateInput) {
            dateInput.value = new Date().toISOString().split('T')[0];
        }
    }

    addEntry() {
        const formData = {
            date: document.getElementById('entryDate').value,
            title: document.getElementById('entryTitle').value,
            description: document.getElementById('entryDescription').value,
            status: document.getElementById('entryStatus').value
        };
        
        if (this.validateEntry(formData)) {
            this.saveEntry(formData);
            this.renderEntry(formData);
            this.form.reset();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
            document.getElementById('entryDate').value = new Date().toISOString().split('T')[0];
        }
    }

    validateEntry(data) {
        if (!data.date || !data.title || !data.status) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return false;
        }
        return true;
    }

    saveEntry(entry) {
        const entries = this.getEntries();
        entries.unshift({
            ...entry,
            id: Date.now().toString()
        });
        localStorage.setItem('studyDiaryEntries', JSON.stringify(entries));
    }

    getEntries() {
        const entries = localStorage.getItem('studyDiaryEntries');
        return entries ? JSON.parse(entries) : [];
    }

    renderEntry(entry) {
        const entryElement = document.createElement('article');
        entryElement.className = `entry-item ${entry.status}`;
        entryElement.innerHTML = `
            <div class="entry-date">${this.formatDate(entry.date)}</div>
            <h3 class="entry-title">${this.escapeHtml(entry.title)}</h3>
            <p class="entry-description">${this.escapeHtml(entry.description)}</p>
            <span class="entry-status">${this.getStatusText(entry.status)}</span>
        `;
        
        if (this.entriesList) {
            this.entriesList.insertBefore(entryElement, this.entriesList.firstChild);
        }
    }

    loadEntries() {
        const entries = this.getEntries();
        entries.forEach(entry => this.renderEntry(entry));
    }

    formatDate(dateString) {
        const options = { day: 'numeric', month: 'long', year: 'numeric' };
        return new Date(dateString).toLocaleDateString('ru-RU', options);
    }

    getStatusText(status) {
        const statusMap = {
            'planned': 'üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
            'in-progress': '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
            'completed': '‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ'
        };
        return statusMap[status] || status;
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
class SmoothScroll {
    constructor() {
        this.init();
    }

    init() {
        this.setupAnchorLinks();
        this.setupScrollAnimations();
    }

    setupAnchorLinks() {
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', (e) => {
                e.preventDefault();
                const target = document.querySelector(anchor.getAttribute('href'));
                if (target) {
                    this.scrollToElement(target);
                }
            });
        });
    }

    scrollToElement(element) {
        const headerHeight = document.querySelector('.header')?.offsetHeight || 0;
        const targetPosition = element.getBoundingClientRect().top + window.pageYOffset - headerHeight;
        
        window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
        });
    }

    setupScrollAnimations() {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate-in');
                }
            });
        }, {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        });

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
        document.querySelectorAll('.project-card, .skill, .stat-item').forEach(el => {
            observer.observe(el);
        });
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
class DecorativeElements {
    constructor() {
        this.init();
    }

    init() {
        this.addBlobs();
        this.addParticles();
    }

    addBlobs() {
        const blobs = [
            { className: 'blob blob-1', size: '400px' },
            { className: 'blob blob-2', size: '500px' },
            { className: 'blob blob-3', size: '300px' }
        ];

        blobs.forEach(blob => {
            const element = document.createElement('div');
            element.className = blob.className;
            element.style.width = blob.size;
            element.style.height = blob.size;
            document.body.appendChild(element);
        });
    }

    addParticles() {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }
}

// –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class PortfolioApp {
    constructor() {
        this.modules = {};
        this.init();
    }

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
        this.modules.pageTransition = new PageTransition();
        this.modules.themeManager = new ThemeManager();
        this.modules.sakuraAnimation = new SakuraAnimation();
        this.modules.smoothScroll = new SmoothScroll();
        this.modules.decorativeElements = new DecorativeElements();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        this.initPageSpecificModules();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.setupGlobalHandlers();
        
        console.log('Portfolio App initialized successfully!');
    }

    initPageSpecificModules() {
        // –ü—Ä–æ–µ–∫—Ç—ã - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        if (document.querySelector('.projects-filters')) {
            this.modules.projectsFilter = new ProjectsFilter();
        }
        
        // –ö–æ–Ω—Ç–∞–∫—Ç—ã - —Ñ–æ—Ä–º–∞
        if (document.getElementById('contactForm')) {
            this.modules.contactForm = new ContactForm();
        }
        
        // –î–Ω–µ–≤–Ω–∏–∫ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏
        if (document.getElementById('diaryForm')) {
            this.modules.studyDiary = new StudyDiary();
        }
        
        // –ù–∞–≤—ã–∫–∏ - –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
        if (document.querySelector('.skill-level')) {
            this.modules.progressBarAnimation = new ProgressBarAnimation();
        }
    }

    setupGlobalHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.updateActiveNavLink();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        this.setupLazyLoading();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.setupPerformanceOptimizations();
    }

    updateActiveNavLink() {
        const currentPath = window.location.pathname;
        const navLinks = document.querySelectorAll('.header-nav a');
        
        navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === currentPath) {
                link.classList.add('active');
            }
        });
    }

    setupLazyLoading() {
        if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.src = img.dataset.src;
                        img.classList.remove('lazy');
                        imageObserver.unobserve(img);
                    }
                });
            });

            document.querySelectorAll('img[data-src]').forEach(img => {
                imageObserver.observe(img);
            });
        }
    }

    setupPerformanceOptimizations() {
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        this.preloadCriticalResources();
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        this.optimizeForMobile();
    }

    preloadCriticalResources() {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –≤–∞–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    }

    optimizeForMobile() {
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if ('ontouchstart' in window) {
            document.body.classList.add('touch-device');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ–≥–¥–∞ DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω
document.addEventListener('DOMContentLoaded', function() {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    window.portfolioApp = new PortfolioApp();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    window.addEventListener('error', (e) => {
        console.error('Global error:', e.error);
    });
});

// Service Worker –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–∞–±–æ—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if ('serviceWorker' in navigator) {
    window.addEventListener('load', function() {
        navigator.serviceWorker.register('/sw.js')
            .then(function(registration) {
                console.log('ServiceWorker registration successful');
            })
            .catch(function(error) {
                console.log('ServiceWorker registration failed: ', error);
            });
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        PortfolioApp,
        ThemeManager,
        PageTransition,
        ProjectsFilter,
        SakuraAnimation,
        ContactForm,
        StudyDiary
    };
}
